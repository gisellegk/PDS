1.
    .include "nios_macros.s" // includes nios macros
    .global _start	     // makes start function global 
_start:
    /* the following two instr. (orhi and ori)
       are what movia converts to */
    orhi r2, r0, %hi(X)
    ori r2, r2, %lo(X) // store address of X in r2.
    movia r3, Y // store address of Y in r3
    movia r4, N // store address of N in r4
    ldw r4, 0(r4) // read the value at the address r4 (=address of N) and store it back in r4 (ie. r4 now contains the value N (6), not the address of N) 
    add r5, r0, r0 // add 0 + 0  and store it in r5 - doesn't seem to do anything?
LABEL:
    ldw r6, 0(r2) // read value at addr (0+r2) (=addr of x) and store in r6 (r6 contains the value of x)
    stw r6, 0(r3) // stores r6 (=value of x) into r3 (addr of y)
    //y = x;
    
    addi r2, r2, 4 // add 4 to the value of r2 (value of x) and store it in r2 (x's address)
    //x = x+4;
    addi r3, r3, 4 // add 4 to val of r3 (val of y) and store in addr r3 (addr of y)
    //y=y+4;
    subi r4, r4, 1 // subtract 1 from val of r4 (val of n) and store in addr r4 (addr of n)
    // n--;
    bgt r4, r0, LABEL // jump to LABEL if r4 > r0 (both params are signed), if not go to next instr.
    //while(n > 0) - note that the block above must execute once before this check happens. 
STOP:
    br STOP
.data
N:
    .word 6
X:
    .word 5, 3, -6, 19, 8, 12
Y:
    .word 0, 0, 0, 0, 0, 0

Code is something like this: 

void label(){
  int X[6] = {5, 3, -6, 19, 8, 12};
  int Y[6]  = {0};
  int N = 6;
  0+0; //(?)
  do{
    Y = X;
    X += 4;
    Y += 4; 
    N--;
  } while(N > 0);
}
2. 

Start: 0x993ff915

bin: 10011 | 00100 | 1111 1111 1110 0100 | 010101
dec:	19 |	4  |	 	         | 21
hex:  0x13 |  0x04 | 0xF   F    E    4   | 0x15

OP: 0x15 = stw - I type
rB = 0x04
rA = 0x13
byte_offset = 0xFFE4

Final answer:
stw r4, 0xFFE4(r19)
note that the offset is a signed number.


3.

Start: divu r14, r5, r22
divu c, a, b

R type
A | B | C | OPX | i5 | OP
 0x05  | 0x16 | 0x0E | 0x24 | 0x0 | 0x3A
0 0101 | 1 0110 | 0 1110 | 10 0100 | 0 0000 | 11 1010

0010 1101 1001 1101 0010 0000 0011 1010
0x2   d    9    d    2    0    3   a

Final answer:
0x 2d9d 203a